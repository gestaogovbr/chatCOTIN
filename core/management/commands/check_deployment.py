from django.core.management.base import BaseCommand
from django.conf import settings
from django.db import connection
from django.core.management import call_command
import os
import sys

class Command(BaseCommand):
    help = 'Verifica se a aplica√ß√£o est√° pronta para deploy no Azure'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--fix',
            action='store_true',
            help='Tenta corrigir problemas automaticamente',
        )
    
    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üîç Verificando configura√ß√µes de deploy...\n')
        )
        
        issues = []
        warnings = []
        
        # 1. Verificar vari√°veis de ambiente cr√≠ticas
        self.stdout.write('üìã Verificando vari√°veis de ambiente...')
        
        required_vars = [
            'SECRET_KEY',
            'DEBUG',
            'ALLOWED_HOSTS',
            'DATABRICKS_HOST',
            'DATABRICKS_TOKEN',
            'DATABRICKS_MODEL_ENDPOINT'
        ]
        
        for var in required_vars:
            value = getattr(settings, var, None)
            if not value or (isinstance(value, str) and not value.strip()):
                issues.append(f"‚ùå {var} n√£o configurada")
            else:
                self.stdout.write(f"  ‚úÖ {var}: OK")
        
        # 2. Verificar configura√ß√µes de produ√ß√£o
        self.stdout.write('\nüîí Verificando configura√ß√µes de seguran√ßa...')
        
        if settings.DEBUG:
            issues.append("‚ùå DEBUG=True em produ√ß√£o (deve ser False)")
        else:
            self.stdout.write("  ‚úÖ DEBUG: False")
        
        if settings.SECRET_KEY == 'django-insecure-zy)j@jjq%x@$&tzesq%87%wr0&^uwtr-!8c$1rmply839t*va7':
            issues.append("‚ùå SECRET_KEY padr√£o ainda em uso")
        else:
            self.stdout.write("  ‚úÖ SECRET_KEY: Customizada")
        
        if 'localhost' in settings.ALLOWED_HOSTS and not settings.DEBUG:
            warnings.append("‚ö†Ô∏è  localhost em ALLOWED_HOSTS (ok para testes)")
        
        # 3. Verificar banco de dados
        self.stdout.write('\nüóÑÔ∏è Verificando banco de dados...')
        
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
            self.stdout.write("  ‚úÖ Conex√£o com banco: OK")
        except Exception as e:
            issues.append(f"‚ùå Erro de conex√£o com banco: {e}")
        
        # 4. Verificar arquivos essenciais
        self.stdout.write('\nüìÅ Verificando arquivos essenciais...')
        
        essential_files = [
            'requirements.txt',
            'manage.py',
            '.env.example',
            'startup.sh',
            'DEPLOY_AZURE.md'
        ]
        
        for file_path in essential_files:
            if os.path.exists(file_path):
                self.stdout.write(f"  ‚úÖ {file_path}: Presente")
            else:
                issues.append(f"‚ùå {file_path}: Ausente")
        
        # 5. Verificar migra√ß√µes
        self.stdout.write('\nüîÑ Verificando migra√ß√µes...')
        
        try:
            from django.db.migrations.executor import MigrationExecutor
            executor = MigrationExecutor(connection)
            pending_migrations = executor.migration_plan(executor.loader.graph.leaf_nodes())
            
            if pending_migrations:
                warnings.append(f"‚ö†Ô∏è  {len(pending_migrations)} migra√ß√µes pendentes")
            else:
                self.stdout.write("  ‚úÖ Migra√ß√µes: Todas aplicadas")
        except Exception as e:
            warnings.append(f"‚ö†Ô∏è  Erro ao verificar migra√ß√µes: {e}")
        
        # 6. Verificar arquivos est√°ticos
        self.stdout.write('\nüì¶ Verificando arquivos est√°ticos...')
        
        if options['fix']:
            try:
                call_command('collectstatic', '--noinput', verbosity=0)
                self.stdout.write("  ‚úÖ Arquivos est√°ticos coletados")
            except Exception as e:
                issues.append(f"‚ùå Erro ao coletar est√°ticos: {e}")
        else:
            static_root = getattr(settings, 'STATIC_ROOT', None)
            if static_root and os.path.exists(static_root):
                self.stdout.write("  ‚úÖ STATIC_ROOT configurado e presente")
            else:
                warnings.append("‚ö†Ô∏è  Execute 'collectstatic' antes do deploy")
        
        # Resultado final
        self.stdout.write('\n' + '='*50)
        
        if issues:
            self.stdout.write(
                self.style.ERROR(f'\n‚ùå DEPLOY N√ÉO RECOMENDADO - {len(issues)} problemas cr√≠ticos:')
            )
            for issue in issues:
                self.stdout.write(f"  {issue}")
            
            self.stdout.write(
                self.style.WARNING('\nüí° Corrija os problemas acima antes do deploy.')
            )
            sys.exit(1)
        
        elif warnings:
            self.stdout.write(
                self.style.WARNING(f'\n‚ö†Ô∏è  DEPLOY COM ATEN√á√ÉO - {len(warnings)} avisos:')
            )
            for warning in warnings:
                self.stdout.write(f"  {warning}")
            
            self.stdout.write(
                self.style.SUCCESS('\n‚úÖ Aplica√ß√£o pronta para deploy (com aten√ß√£o aos avisos)')
            )
        
        else:
            self.stdout.write(
                self.style.SUCCESS('\nüöÄ APLICA√á√ÉO PRONTA PARA DEPLOY!')
            )
            self.stdout.write(
                self.style.SUCCESS('Todas as verifica√ß√µes passaram com sucesso.')
            )
        
        # Instru√ß√µes para DevOps
        self.stdout.write('\n' + '='*50)
        self.stdout.write(
            self.style.SUCCESS('\nüìñ Para a equipe de DevOps:')
        )
        self.stdout.write('1. Consulte o arquivo DEPLOY_AZURE.md')
        self.stdout.write('2. Configure as vari√°veis do .env.example')
        self.stdout.write('3. Use o script startup.sh para inicializa√ß√£o')
        self.stdout.write('4. Configure health check em /health/')
        self.stdout.write('5. Monitore logs do Gunicorn e Django') 